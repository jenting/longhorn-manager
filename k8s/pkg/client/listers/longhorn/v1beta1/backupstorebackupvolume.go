/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupStoreBackupVolumeLister helps list BackupStoreBackupVolumes.
type BackupStoreBackupVolumeLister interface {
	// List lists all BackupStoreBackupVolumes in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.BackupStoreBackupVolume, err error)
	// BackupStoreBackupVolumes returns an object that can list and get BackupStoreBackupVolumes.
	BackupStoreBackupVolumes(namespace string) BackupStoreBackupVolumeNamespaceLister
	BackupStoreBackupVolumeListerExpansion
}

// backupStoreBackupVolumeLister implements the BackupStoreBackupVolumeLister interface.
type backupStoreBackupVolumeLister struct {
	indexer cache.Indexer
}

// NewBackupStoreBackupVolumeLister returns a new BackupStoreBackupVolumeLister.
func NewBackupStoreBackupVolumeLister(indexer cache.Indexer) BackupStoreBackupVolumeLister {
	return &backupStoreBackupVolumeLister{indexer: indexer}
}

// List lists all BackupStoreBackupVolumes in the indexer.
func (s *backupStoreBackupVolumeLister) List(selector labels.Selector) (ret []*v1beta1.BackupStoreBackupVolume, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupStoreBackupVolume))
	})
	return ret, err
}

// BackupStoreBackupVolumes returns an object that can list and get BackupStoreBackupVolumes.
func (s *backupStoreBackupVolumeLister) BackupStoreBackupVolumes(namespace string) BackupStoreBackupVolumeNamespaceLister {
	return backupStoreBackupVolumeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupStoreBackupVolumeNamespaceLister helps list and get BackupStoreBackupVolumes.
type BackupStoreBackupVolumeNamespaceLister interface {
	// List lists all BackupStoreBackupVolumes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.BackupStoreBackupVolume, err error)
	// Get retrieves the BackupStoreBackupVolume from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.BackupStoreBackupVolume, error)
	BackupStoreBackupVolumeNamespaceListerExpansion
}

// backupStoreBackupVolumeNamespaceLister implements the BackupStoreBackupVolumeNamespaceLister
// interface.
type backupStoreBackupVolumeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupStoreBackupVolumes in the indexer for a given namespace.
func (s backupStoreBackupVolumeNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackupStoreBackupVolume, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupStoreBackupVolume))
	})
	return ret, err
}

// Get retrieves the BackupStoreBackupVolume from the indexer for a given namespace and name.
func (s backupStoreBackupVolumeNamespaceLister) Get(name string) (*v1beta1.BackupStoreBackupVolume, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backupstorebackupvolume"), name)
	}
	return obj.(*v1beta1.BackupStoreBackupVolume), nil
}
