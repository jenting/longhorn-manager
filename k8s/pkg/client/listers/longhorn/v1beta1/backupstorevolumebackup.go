/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/longhorn/longhorn-manager/k8s/pkg/apis/longhorn/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackupStoreVolumeBackupLister helps list BackupStoreVolumeBackups.
type BackupStoreVolumeBackupLister interface {
	// List lists all BackupStoreVolumeBackups in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.BackupStoreVolumeBackup, err error)
	// BackupStoreVolumeBackups returns an object that can list and get BackupStoreVolumeBackups.
	BackupStoreVolumeBackups(namespace string) BackupStoreVolumeBackupNamespaceLister
	BackupStoreVolumeBackupListerExpansion
}

// backupStoreVolumeBackupLister implements the BackupStoreVolumeBackupLister interface.
type backupStoreVolumeBackupLister struct {
	indexer cache.Indexer
}

// NewBackupStoreVolumeBackupLister returns a new BackupStoreVolumeBackupLister.
func NewBackupStoreVolumeBackupLister(indexer cache.Indexer) BackupStoreVolumeBackupLister {
	return &backupStoreVolumeBackupLister{indexer: indexer}
}

// List lists all BackupStoreVolumeBackups in the indexer.
func (s *backupStoreVolumeBackupLister) List(selector labels.Selector) (ret []*v1beta1.BackupStoreVolumeBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupStoreVolumeBackup))
	})
	return ret, err
}

// BackupStoreVolumeBackups returns an object that can list and get BackupStoreVolumeBackups.
func (s *backupStoreVolumeBackupLister) BackupStoreVolumeBackups(namespace string) BackupStoreVolumeBackupNamespaceLister {
	return backupStoreVolumeBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackupStoreVolumeBackupNamespaceLister helps list and get BackupStoreVolumeBackups.
type BackupStoreVolumeBackupNamespaceLister interface {
	// List lists all BackupStoreVolumeBackups in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.BackupStoreVolumeBackup, err error)
	// Get retrieves the BackupStoreVolumeBackup from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.BackupStoreVolumeBackup, error)
	BackupStoreVolumeBackupNamespaceListerExpansion
}

// backupStoreVolumeBackupNamespaceLister implements the BackupStoreVolumeBackupNamespaceLister
// interface.
type backupStoreVolumeBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackupStoreVolumeBackups in the indexer for a given namespace.
func (s backupStoreVolumeBackupNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.BackupStoreVolumeBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.BackupStoreVolumeBackup))
	})
	return ret, err
}

// Get retrieves the BackupStoreVolumeBackup from the indexer for a given namespace and name.
func (s backupStoreVolumeBackupNamespaceLister) Get(name string) (*v1beta1.BackupStoreVolumeBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("backupstorevolumebackup"), name)
	}
	return obj.(*v1beta1.BackupStoreVolumeBackup), nil
}
